// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SparkleAir.Front.API.Models;

public partial class dbAirSparkleContext : DbContext
{
    public dbAirSparkleContext(DbContextOptions<dbAirSparkleContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AirBookSeat> AirBookSeats { get; set; }

    public virtual DbSet<AirCabin> AirCabins { get; set; }

    public virtual DbSet<AirCabinRule> AirCabinRules { get; set; }

    public virtual DbSet<AirCabinSeat> AirCabinSeats { get; set; }

    public virtual DbSet<AirFlight> AirFlights { get; set; }

    public virtual DbSet<AirFlightManagement> AirFlightManagements { get; set; }

    public virtual DbSet<AirFlightSaleStatus> AirFlightSaleStatuses { get; set; }

    public virtual DbSet<AirFlightSeat> AirFlightSeats { get; set; }

    public virtual DbSet<AirFlightStatus> AirFlightStatuses { get; set; }

    public virtual DbSet<AirMeal> AirMeals { get; set; }

    public virtual DbSet<AirOwn> AirOwns { get; set; }

    public virtual DbSet<AirPort> AirPorts { get; set; }

    public virtual DbSet<AirTakeOffStatus> AirTakeOffStatuses { get; set; }

    public virtual DbSet<AirType> AirTypes { get; set; }

    public virtual DbSet<AriTicketPrice> AriTicketPrices { get; set; }

    public virtual DbSet<Campaign> Campaigns { get; set; }

    public virtual DbSet<CampaignsCoupon> CampaignsCoupons { get; set; }

    public virtual DbSet<CampaignsCouponAirFlight> CampaignsCouponAirFlights { get; set; }

    public virtual DbSet<CampaignsCouponMember> CampaignsCouponMembers { get; set; }

    public virtual DbSet<CampaignsDiscount> CampaignsDiscounts { get; set; }

    public virtual DbSet<CampaignsDiscountMember> CampaignsDiscountMembers { get; set; }

    public virtual DbSet<CampaignsDiscountStatusNotification> CampaignsDiscountStatusNotifications { get; set; }

    public virtual DbSet<CampaignsDiscountTfitem> CampaignsDiscountTfitems { get; set; }

    public virtual DbSet<CampaignsFlightCouponsUsageHistory> CampaignsFlightCouponsUsageHistories { get; set; }

    public virtual DbSet<CampaignsTfdiscountUsageHistory> CampaignsTfdiscountUsageHistories { get; set; }

    public virtual DbSet<CompanyDepartment> CompanyDepartments { get; set; }

    public virtual DbSet<CompanyJob> CompanyJobs { get; set; }

    public virtual DbSet<CompanyStaff> CompanyStaffs { get; set; }

    public virtual DbSet<CompanyStaffLoginLog> CompanyStaffLoginLogs { get; set; }

    public virtual DbSet<CompanyStaffsChangePasswordLog> CompanyStaffsChangePasswordLogs { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Luggage> Luggages { get; set; }

    public virtual DbSet<LuggageOrder> LuggageOrders { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberClass> MemberClasses { get; set; }

    public virtual DbSet<MemberLoginLog> MemberLoginLogs { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MessageBox> MessageBoxes { get; set; }

    public virtual DbSet<MileApply> MileApplies { get; set; }

    public virtual DbSet<MileOrder> MileOrders { get; set; }

    public virtual DbSet<MileageDetail> MileageDetails { get; set; }

    public virtual DbSet<PermissionGroup> PermissionGroups { get; set; }

    public virtual DbSet<PermissionGroupsAddStaff> PermissionGroupsAddStaffs { get; set; }

    public virtual DbSet<PermissionPageInfo> PermissionPageInfos { get; set; }

    public virtual DbSet<PermissionSetting> PermissionSettings { get; set; }

    public virtual DbSet<SeatArea> SeatAreas { get; set; }

    public virtual DbSet<SeatGroup> SeatGroups { get; set; }

    public virtual DbSet<Tfcategory> Tfcategories { get; set; }

    public virtual DbSet<Tfitem> Tfitems { get; set; }

    public virtual DbSet<TforderStatus> TforderStatuses { get; set; }

    public virtual DbSet<Tforderlist> Tforderlists { get; set; }

    public virtual DbSet<Tfreserf> Tfreserves { get; set; }

    public virtual DbSet<Tfreservelist> Tfreservelists { get; set; }

    public virtual DbSet<Tfwishlist> Tfwishlists { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TicketCancel> TicketCancels { get; set; }

    public virtual DbSet<TicketCancelStatus> TicketCancelStatuses { get; set; }

    public virtual DbSet<TicketDetail> TicketDetails { get; set; }

    public virtual DbSet<TicketInvoicingDetail> TicketInvoicingDetails { get; set; }

    public virtual DbSet<TransferMethod> TransferMethods { get; set; }

    public virtual DbSet<TransferPayment> TransferPayments { get; set; }

    public virtual DbSet<TransferRefund> TransferRefunds { get; set; }

    public virtual DbSet<TypeofPassenger> TypeofPassengers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AirBookSeat>(entity =>
        {
            entity.Property(e => e.HandlingFee).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SeatAssignmentNum)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.AirFlightSeat).WithMany(p => p.AirBookSeats)
                .HasForeignKey(d => d.AirFlightSeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirBookSeats_AirFlightSeats");

            entity.HasOne(d => d.TicketInvoicingDetail).WithMany(p => p.AirBookSeats)
                .HasForeignKey(d => d.TicketInvoicingDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirBookSeats_TicketInvoicingDetails");

            entity.HasOne(d => d.TransferPayment).WithMany(p => p.AirBookSeats)
                .HasForeignKey(d => d.TransferPaymentId)
                .HasConstraintName("FK_AirBookSeats_TransferPayments");
        });

        modelBuilder.Entity<AirCabin>(entity =>
        {
            entity.Property(e => e.CabinClass)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<AirCabinRule>(entity =>
        {
            entity.Property(e => e.CabinCode)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.AirCabin).WithMany(p => p.AirCabinRules)
                .HasForeignKey(d => d.AirCabinId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirCabinRules_AirCabins");
        });

        modelBuilder.Entity<AirCabinSeat>(entity =>
        {
            entity.HasOne(d => d.AirCabin).WithMany(p => p.AirCabinSeats)
                .HasForeignKey(d => d.AirCabinId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirCabinSeats_AirCabins");

            entity.HasOne(d => d.AirType).WithMany(p => p.AirCabinSeats)
                .HasForeignKey(d => d.AirTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirCabinSeats_AirTypes");
        });

        modelBuilder.Entity<AirFlight>(entity =>
        {
            entity.HasOne(d => d.AirFlightManagement).WithMany(p => p.AirFlights)
                .HasForeignKey(d => d.AirFlightManagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlights_AirFlightManagements");

            entity.HasOne(d => d.AirFlightSaleStatus).WithMany(p => p.AirFlights)
                .HasForeignKey(d => d.AirFlightSaleStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlights_AirFlightSaleStatuses");

            entity.HasOne(d => d.AirOwn).WithMany(p => p.AirFlights)
                .HasForeignKey(d => d.AirOwnId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlights_AirOwns");
        });

        modelBuilder.Entity<AirFlightManagement>(entity =>
        {
            entity.Property(e => e.ArrivalTerminal).HasMaxLength(15);
            entity.Property(e => e.DayofWeek)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.DepartureTerminal).HasMaxLength(15);
            entity.Property(e => e.FlightCode)
                .IsRequired()
                .HasMaxLength(15);

            entity.HasOne(d => d.ArrivalAirport).WithMany(p => p.AirFlightManagementArrivalAirports)
                .HasForeignKey(d => d.ArrivalAirportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlightManagements_AirPorts1");

            entity.HasOne(d => d.DepartureAirport).WithMany(p => p.AirFlightManagementDepartureAirports)
                .HasForeignKey(d => d.DepartureAirportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlightManagements_AirPorts");
        });

        modelBuilder.Entity<AirFlightSaleStatus>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15);
        });

        modelBuilder.Entity<AirFlightSeat>(entity =>
        {
            entity.Property(e => e.SeatNum)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.AirCabin).WithMany(p => p.AirFlightSeats)
                .HasForeignKey(d => d.AirCabinId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlightSeats_AirCabins");

            entity.HasOne(d => d.AirFlight).WithMany(p => p.AirFlightSeats)
                .HasForeignKey(d => d.AirFlightId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirFlightSeats_AirFlights");
        });

        modelBuilder.Entity<AirFlightStatus>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15);
        });

        modelBuilder.Entity<AirMeal>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Image).HasMaxLength(3000);
            entity.Property(e => e.ImageBit).HasMaxLength(100);
            entity.Property(e => e.MealContent).HasMaxLength(300);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AirCabin).WithMany(p => p.AirMeals)
                .HasForeignKey(d => d.AirCabinId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirMeals_AirCabins");
        });

        modelBuilder.Entity<AirOwn>(entity =>
        {
            entity.HasIndex(e => e.RegistrationNum, "UK_AirOwns").IsUnique();

            entity.Property(e => e.RegistrationNum)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(30);

            entity.HasOne(d => d.AirType).WithMany(p => p.AirOwns)
                .HasForeignKey(d => d.AirTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirOwns_AirTypes");
        });

        modelBuilder.Entity<AirPort>(entity =>
        {
            entity.Property(e => e.AirPortName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.CityIntroduction)
                .IsRequired()
                .HasMaxLength(60);
            entity.Property(e => e.Continent)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Gps)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Img).HasMaxLength(2000);
            entity.Property(e => e.Lata)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AirTakeOffStatus>(entity =>
        {
            entity.HasOne(d => d.AirFlight).WithMany(p => p.AirTakeOffStatuses)
                .HasForeignKey(d => d.AirFlightId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirTakeOffStatuses_AirFlights");

            entity.HasOne(d => d.AirFlightStatus).WithMany(p => p.AirTakeOffStatuses)
                .HasForeignKey(d => d.AirFlightStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AirTakeOffStatuses_AirFlightStatuses");
        });

        modelBuilder.Entity<AirType>(entity =>
        {
            entity.HasIndex(e => e.FlightModel, "UK_AirTypes").IsUnique();

            entity.Property(e => e.FlightModel)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.Img).HasMaxLength(300);
            entity.Property(e => e.Introduction).HasMaxLength(1000);
            entity.Property(e => e.ManufactureCompany)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<AriTicketPrice>(entity =>
        {
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AirCabinRule).WithMany(p => p.AriTicketPrices)
                .HasForeignKey(d => d.AirCabinRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AriTicketPrices_AirCabinRules");

            entity.HasOne(d => d.AirFlightManagement).WithMany(p => p.AriTicketPrices)
                .HasForeignKey(d => d.AirFlightManagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AriTicketPrices_AirFlightManagements");
        });

        modelBuilder.Entity<Campaign>(entity =>
        {
            entity.Property(e => e.CampaignType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<CampaignsCoupon>(entity =>
        {
            entity.Property(e => e.AirFlightsCriteria).HasMaxLength(4000);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DiscountValue).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.Image).HasMaxLength(100);
            entity.Property(e => e.MemberCriteria).HasMaxLength(4000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Campaign).WithMany(p => p.CampaignsCoupons)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsCoupons_Campaigns");
        });

        modelBuilder.Entity<CampaignsCouponAirFlight>(entity =>
        {
            entity.HasOne(d => d.AirFlight).WithMany(p => p.CampaignsCouponAirFlights)
                .HasForeignKey(d => d.AirFlightId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsCouponAirFlights_AirFlights");

            entity.HasOne(d => d.CampaignsCoupon).WithMany(p => p.CampaignsCouponAirFlights)
                .HasForeignKey(d => d.CampaignsCouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsCouponAirFlights_CampaignsCoupons");
        });

        modelBuilder.Entity<CampaignsCouponMember>(entity =>
        {
            entity.HasOne(d => d.CampaignsCoupon).WithMany(p => p.CampaignsCouponMembers)
                .HasForeignKey(d => d.CampaignsCouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsCouponMembers_CampaignsCoupons");

            entity.HasOne(d => d.Member).WithMany(p => p.CampaignsCouponMembers)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsCouponMembers_Members");
        });

        modelBuilder.Entity<CampaignsDiscount>(entity =>
        {
            entity.Property(e => e.BundleSkus)
                .HasColumnType("decimal(15, 4)")
                .HasColumnName("BundleSKUs");
            entity.Property(e => e.DiscountValue).HasColumnType("decimal(15, 4)");
            entity.Property(e => e.Image).HasMaxLength(100);
            entity.Property(e => e.MemberCriteria).HasMaxLength(4000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TfitemsCriteria)
                .HasMaxLength(4000)
                .HasColumnName("TFItemsCriteria");
            entity.Property(e => e.Value).HasColumnType("decimal(15, 4)");

            entity.HasOne(d => d.Campaign).WithMany(p => p.CampaignsDiscounts)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscounts_Campaigns");
        });

        modelBuilder.Entity<CampaignsDiscountMember>(entity =>
        {
            entity.HasOne(d => d.CampaignsDiscount).WithMany(p => p.CampaignsDiscountMembers)
                .HasForeignKey(d => d.CampaignsDiscountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountMembers_CampaignsDiscounts");

            entity.HasOne(d => d.Members).WithMany(p => p.CampaignsDiscountMembers)
                .HasForeignKey(d => d.MembersId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountMembers_Members");
        });

        modelBuilder.Entity<CampaignsDiscountStatusNotification>(entity =>
        {
            entity.Property(e => e.NotiBody).IsUnicode(false);
            entity.Property(e => e.NotiHeader).IsUnicode(false);
            entity.Property(e => e.Url).IsUnicode(false);

            entity.HasOne(d => d.CampaignsDiscount).WithMany(p => p.CampaignsDiscountStatusNotifications)
                .HasForeignKey(d => d.CampaignsDiscountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountStatusNotifications_CampaignsDiscountStatusNotifications");

            entity.HasOne(d => d.CompanyStaffs).WithMany(p => p.CampaignsDiscountStatusNotifications)
                .HasForeignKey(d => d.CompanyStaffsId)
                .HasConstraintName("FK_CampaignsDiscountStatusNotifications_CompanyStaffs");

            entity.HasOne(d => d.Member).WithMany(p => p.CampaignsDiscountStatusNotifications)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountStatusNotifications_Members");
        });

        modelBuilder.Entity<CampaignsDiscountTfitem>(entity =>
        {
            entity.ToTable("CampaignsDiscountTFItems");

            entity.Property(e => e.TfitemId).HasColumnName("TFItemId");

            entity.HasOne(d => d.CampaignsDiscount).WithMany(p => p.CampaignsDiscountTfitems)
                .HasForeignKey(d => d.CampaignsDiscountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountTFItems_CampaignsDiscounts");

            entity.HasOne(d => d.Tfitem).WithMany(p => p.CampaignsDiscountTfitems)
                .HasForeignKey(d => d.TfitemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsDiscountTFItems_TFItems");
        });

        modelBuilder.Entity<CampaignsFlightCouponsUsageHistory>(entity =>
        {
            entity.ToTable("CampaignsFlightCouponsUsageHistory");

            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.CampaignsCoupon).WithMany(p => p.CampaignsFlightCouponsUsageHistories)
                .HasForeignKey(d => d.CampaignsCouponId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsFlightCouponsUsageHistory_CampaignsCoupons");

            entity.HasOne(d => d.Ticket).WithMany(p => p.CampaignsFlightCouponsUsageHistories)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsFlightCouponsUsageHistory_Tickets1");
        });

        modelBuilder.Entity<CampaignsTfdiscountUsageHistory>(entity =>
        {
            entity.ToTable("CampaignsTFDiscountUsageHistory");

            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TfreservelistId).HasColumnName("TFReservelistId");

            entity.HasOne(d => d.CampaignsDiscounts).WithMany(p => p.CampaignsTfdiscountUsageHistories)
                .HasForeignKey(d => d.CampaignsDiscountsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsTFDiscountUsageHistory_CampaignsDiscounts");

            entity.HasOne(d => d.Tfreservelist).WithMany(p => p.CampaignsTfdiscountUsageHistories)
                .HasForeignKey(d => d.TfreservelistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsTFDiscountUsageHistory_TFReservelists");
        });

        modelBuilder.Entity<CompanyDepartment>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<CompanyJob>(entity =>
        {
            entity.Property(e => e.JobTitle)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.CompanyDepartment).WithMany(p => p.CompanyJobs)
                .HasForeignKey(d => d.CompanyDepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyJobs_CompanyDepartments");
        });

        modelBuilder.Entity<CompanyStaff>(entity =>
        {
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.CompanyJob).WithMany(p => p.CompanyStaffs)
                .HasForeignKey(d => d.CompanyJobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyStaffs_CompanyJobs");
        });

        modelBuilder.Entity<CompanyStaffLoginLog>(entity =>
        {
            entity.Property(e => e.Ipaddress)
                .IsRequired()
                .HasMaxLength(17)
                .IsFixedLength()
                .HasColumnName("IPAddress");

            entity.HasOne(d => d.CompanyStaff).WithMany(p => p.CompanyStaffLoginLogs)
                .HasForeignKey(d => d.CompanyStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyStaffLoginLogs_CompanyStaffs");
        });

        modelBuilder.Entity<CompanyStaffsChangePasswordLog>(entity =>
        {
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(16)
                .IsFixedLength();

            entity.HasOne(d => d.CompanyStaff).WithMany(p => p.CompanyStaffsChangePasswordLogs)
                .HasForeignKey(d => d.CompanyStaffId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CompanyStaffsChangePasswordLogs_CompanyStaffs");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.ChineseName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.EnglishName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Luggage>(entity =>
        {
            entity.HasOne(d => d.AirFlightManagements).WithMany(p => p.Luggage)
                .HasForeignKey(d => d.AirFlightManagementsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Luggages_AirFlightManagements");
        });

        modelBuilder.Entity<LuggageOrder>(entity =>
        {
            entity.Property(e => e.LuggageNum)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.OrderStatus)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.OrderTime).HasColumnType("datetime");

            entity.HasOne(d => d.Luggage).WithMany(p => p.LuggageOrders)
                .HasForeignKey(d => d.LuggageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LuggageOrders_Luggages");

            entity.HasOne(d => d.TicketInvoicingDetail).WithMany(p => p.LuggageOrders)
                .HasForeignKey(d => d.TicketInvoicingDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LuggageOrders_TicketInvoicingDetails");

            entity.HasOne(d => d.TransferPayments).WithMany(p => p.LuggageOrders)
                .HasForeignKey(d => d.TransferPaymentsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LuggageOrders_TransferPayments");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasIndex(e => e.Account, "IX_Members").IsUnique();

            entity.Property(e => e.Account).HasMaxLength(16);
            entity.Property(e => e.ChineseFirstName).HasMaxLength(10);
            entity.Property(e => e.ChineseLastName).HasMaxLength(10);
            entity.Property(e => e.ConfirmCode).HasMaxLength(100);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EnglishFirstName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.EnglishLastName)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.GoogleId)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.LineId)
                .HasMaxLength(100)
                .IsFixedLength();
            entity.Property(e => e.PassportNumber)
                .IsRequired()
                .HasMaxLength(9);
            entity.Property(e => e.Password).HasMaxLength(200);
            entity.Property(e => e.PasswordSalt)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Country).WithMany(p => p.Members)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Members_Countries");

            entity.HasOne(d => d.MemberClass).WithMany(p => p.Members)
                .HasForeignKey(d => d.MemberClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Members_MemberClasses");
        });

        modelBuilder.Entity<MemberClass>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<MemberLoginLog>(entity =>
        {
            entity.Property(e => e.Ipaddress)
                .IsRequired()
                .HasMaxLength(17)
                .IsFixedLength()
                .HasColumnName("IPAddress");

            entity.HasOne(d => d.Member).WithMany(p => p.MemberLoginLogs)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberLoginLogs_Members");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.MessageContent)
                .IsRequired()
                .HasMaxLength(3000);

            entity.HasOne(d => d.CompanyStaff).WithMany()
                .HasForeignKey(d => d.CompanyStaffId)
                .HasConstraintName("FK_Messages_CompanyStaffs");

            entity.HasOne(d => d.Member).WithMany()
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Messages_Members");

            entity.HasOne(d => d.MessageBox).WithMany()
                .HasForeignKey(d => d.MessageBoxId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_MessageBoxes");
        });

        modelBuilder.Entity<MessageBox>(entity =>
        {
            entity.HasOne(d => d.Member).WithMany(p => p.MessageBoxes)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MessageBoxes_Members");
        });

        modelBuilder.Entity<MileApply>(entity =>
        {
            entity.ToTable("MileApply");

            entity.HasOne(d => d.Chose).WithMany(p => p.MileApplyChoses)
                .HasForeignKey(d => d.ChoseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MileApply_MileageDetails1");

            entity.HasOne(d => d.Event).WithMany(p => p.MileApplyEvents)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MileApply_MileageDetails");
        });

        modelBuilder.Entity<MileOrder>(entity =>
        {
            entity.Property(e => e.MileNum)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OrderStatus)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.OrderTime).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.MileOrders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MileOrders_Members");

            entity.HasOne(d => d.TransferPayment).WithMany(p => p.MileOrders)
                .HasForeignKey(d => d.TransferPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MileOrders_TransferPayments");
        });

        modelBuilder.Entity<MileageDetail>(entity =>
        {
            entity.Property(e => e.ChangeTime).HasColumnType("datetime");
            entity.Property(e => e.MileReason)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.MileValidity).HasColumnType("datetime");
            entity.Property(e => e.OrderNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.MermberIsdNavigation).WithMany(p => p.MileageDetails)
                .HasForeignKey(d => d.MermberIsd)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MileageDetails_Members");
        });

        modelBuilder.Entity<PermissionGroup>(entity =>
        {
            entity.Property(e => e.Ddescribe)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<PermissionGroupsAddStaff>(entity =>
        {
            entity.HasOne(d => d.CompanyStaffs).WithMany(p => p.PermissionGroupsAddStaffs)
                .HasForeignKey(d => d.CompanyStaffsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionGroupsAddStaffs_CompanyStaffs");

            entity.HasOne(d => d.PermissionGroups).WithMany(p => p.PermissionGroupsAddStaffs)
                .HasForeignKey(d => d.PermissionGroupsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionGroupsAddStaffs_PermissionGroups");
        });

        modelBuilder.Entity<PermissionPageInfo>(entity =>
        {
            entity.Property(e => e.PageDescription)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PageName)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.PageNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<PermissionSetting>(entity =>
        {
            entity.HasOne(d => d.PermissionGroups).WithMany(p => p.PermissionSettings)
                .HasForeignKey(d => d.PermissionGroupsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionSettings_PermissionGroups");

            entity.HasOne(d => d.PermissionPageInfo).WithMany(p => p.PermissionSettings)
                .HasForeignKey(d => d.PermissionPageInfoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionSettings_PermissionPageInfos");
        });

        modelBuilder.Entity<SeatArea>(entity =>
        {
            entity.Property(e => e.SeatGroup)
                .IsRequired()
                .HasMaxLength(15);
        });

        modelBuilder.Entity<SeatGroup>(entity =>
        {
            entity.Property(e => e.SeatNum)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.AirType).WithMany(p => p.SeatGroups)
                .HasForeignKey(d => d.AirTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeatGroups_AirTypes");

            entity.HasOne(d => d.SeatArea).WithMany(p => p.SeatGroups)
                .HasForeignKey(d => d.SeatAreaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SeatGroups_SeatAreas");
        });

        modelBuilder.Entity<Tfcategory>(entity =>
        {
            entity.ToTable("TFCategories");

            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Tfitem>(entity =>
        {
            entity.ToTable("TFItems");

            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SerialNumber)
                .IsRequired()
                .HasMaxLength(30);
            entity.Property(e => e.TfcategoriesId).HasColumnName("TFCategoriesId");

            entity.HasOne(d => d.Tfcategories).WithMany(p => p.Tfitems)
                .HasForeignKey(d => d.TfcategoriesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFItems_TFCategories");
        });

        modelBuilder.Entity<TforderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TForderStatus");

            entity.ToTable("TFOrderStatuses");

            entity.Property(e => e.CancelledTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.FulfilledTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PaidTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.RefundTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.TfreserveId).HasColumnName("TFReserveId");

            entity.HasOne(d => d.Tfreserve).WithMany(p => p.TforderStatuses)
                .HasForeignKey(d => d.TfreserveId)
                .HasConstraintName("FK_TForderStatus_TFReserves");
        });

        modelBuilder.Entity<Tforderlist>(entity =>
        {
            entity.ToTable("TFOrderlists");

            entity.Property(e => e.TfitemsId).HasColumnName("TFItemsId");

            entity.HasOne(d => d.Tfitems).WithMany(p => p.Tforderlists)
                .HasForeignKey(d => d.TfitemsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFOrderlists_TFItems");

            entity.HasOne(d => d.TicketDetails).WithMany(p => p.Tforderlists)
                .HasForeignKey(d => d.TicketDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFOrderlists_TicketDetails");
        });

        modelBuilder.Entity<Tfreserf>(entity =>
        {
            entity.ToTable("TFReserves");

            entity.Property(e => e.TforderStatusId).HasColumnName("TFOrderStatusID");

            entity.HasOne(d => d.Member).WithMany(p => p.Tfreserves)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFReserves_Members");

            entity.HasOne(d => d.TicketDetails).WithMany(p => p.Tfreserves)
                .HasForeignKey(d => d.TicketDetailsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFReserves_TicketDetails");

            entity.HasOne(d => d.TransferPayment).WithMany(p => p.Tfreserves)
                .HasForeignKey(d => d.TransferPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFReserves_TransferPayments");
        });

        modelBuilder.Entity<Tfreservelist>(entity =>
        {
            entity.ToTable("TFReservelists");

            entity.Property(e => e.TfitemsId).HasColumnName("TFItemsId");
            entity.Property(e => e.TfreserveId).HasColumnName("TFReserveId");

            entity.HasOne(d => d.Tfitems).WithMany(p => p.Tfreservelists)
                .HasForeignKey(d => d.TfitemsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFReservelists_TFItems");

            entity.HasOne(d => d.Tfreserve).WithMany(p => p.Tfreservelists)
                .HasForeignKey(d => d.TfreserveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFReservelists_TFReserves");
        });

        modelBuilder.Entity<Tfwishlist>(entity =>
        {
            entity.ToTable("TFWishlists");

            entity.Property(e => e.TfitemsId).HasColumnName("TFItemsId");

            entity.HasOne(d => d.Member).WithMany(p => p.Tfwishlists)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFWishlists_Members");

            entity.HasOne(d => d.Tfitems).WithMany(p => p.Tfwishlists)
                .HasForeignKey(d => d.TfitemsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TFWishlists_TFItems");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.Property(e => e.ActualPaidAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrderNum)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.TotalPayableAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AirFlight).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.AirFlightId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tickets_AirFlights");

            entity.HasOne(d => d.Member).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tickets_Members");

            entity.HasOne(d => d.TransferPayment).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.TransferPaymentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tickets_TransferPayments");
        });

        modelBuilder.Entity<TicketCancel>(entity =>
        {
            entity.Property(e => e.ActualRefundAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OriginalOrderAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RefundFeeDetail)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.TotalHandlingFee).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.TicketCancelStatus).WithMany(p => p.TicketCancels)
                .HasForeignKey(d => d.TicketCancelStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketCancels_TicketCancelStatuses");

            entity.HasOne(d => d.Ticket).WithMany(p => p.TicketCancels)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketCancels_Tickets");

            entity.HasOne(d => d.TransferRefund).WithMany(p => p.TicketCancels)
                .HasForeignKey(d => d.TransferRefundId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketCancels_TransferRefunds");
        });

        modelBuilder.Entity<TicketCancelStatus>(entity =>
        {
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(15);
        });

        modelBuilder.Entity<TicketDetail>(entity =>
        {
            entity.Property(e => e.BookRef).HasMaxLength(10);
            entity.Property(e => e.TicketAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AirCabinRule).WithMany(p => p.TicketDetails)
                .HasForeignKey(d => d.AirCabinRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketDetails_AirCabinRules");

            entity.HasOne(d => d.Ticket).WithMany(p => p.TicketDetails)
                .HasForeignKey(d => d.TicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketDetails_Tickets");

            entity.HasOne(d => d.TypeofPassenger).WithMany(p => p.TicketDetails)
                .HasForeignKey(d => d.TypeofPassengerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketDetails_TypeofPassengers");
        });

        modelBuilder.Entity<TicketInvoicingDetail>(entity =>
        {
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.PassportNum)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Remark)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.TicketNum)
                .IsRequired()
                .HasMaxLength(13);

            entity.HasOne(d => d.AirFlightSeat).WithMany(p => p.TicketInvoicingDetails)
                .HasForeignKey(d => d.AirFlightSeatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketInvoicingDetails_AirFlightSeats");

            entity.HasOne(d => d.AirMeal).WithMany(p => p.TicketInvoicingDetails)
                .HasForeignKey(d => d.AirMealId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketInvoicingDetails_AirMeals");

            entity.HasOne(d => d.Country).WithMany(p => p.TicketInvoicingDetails)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketInvoicingDetails_Countries");

            entity.HasOne(d => d.TicketDetail).WithMany(p => p.TicketInvoicingDetails)
                .HasForeignKey(d => d.TicketDetailId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TicketInvoicingDetails_TicketDetails");
        });

        modelBuilder.Entity<TransferMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TransferPaymentIMethods");

            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<TransferPayment>(entity =>
        {
            entity.Property(e => e.Info).HasMaxLength(1000);
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaymentDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.TransferMethods).WithMany(p => p.TransferPayments)
                .HasForeignKey(d => d.TransferMethodsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferPayments_TransferMethods");
        });

        modelBuilder.Entity<TransferRefund>(entity =>
        {
            entity.Property(e => e.RefundtAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.TransferImethodsId).HasColumnName("TransferIMethodsId");

            entity.HasOne(d => d.TransferImethods).WithMany(p => p.TransferRefunds)
                .HasForeignKey(d => d.TransferImethodsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferRefunds_TransferMethods");

            entity.HasOne(d => d.TransferPayments).WithMany(p => p.TransferRefunds)
                .HasForeignKey(d => d.TransferPaymentsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TransferRefunds_TransferPayments1");
        });

        modelBuilder.Entity<TypeofPassenger>(entity =>
        {
            entity.Property(e => e.PassengerType)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.PricePercent).HasColumnType("decimal(18, 2)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}